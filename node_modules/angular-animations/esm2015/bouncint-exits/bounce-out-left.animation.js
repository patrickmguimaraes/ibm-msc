import { animate, animateChild, animation, group, keyframes, query, style, transition, trigger, useAnimation } from '@angular/animations';
const bounceOutLeft = animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ opacity: 1, transform: 'translate3d(0, 0, 0)', easing: 'ease', offset: 0 }),
        style({ opacity: 1, transform: 'translate3d(20px, 0, 0)', easing: 'ease', offset: 0.2 }),
        style({ opacity: 0, transform: 'translate3d(-{{translate}}, 0, 0)', easing: 'ease', offset: 1 })
    ]))
]);
const DEFAULT_DURATION = 1000;
export function bounceOutLeftAnimation(options) {
    return trigger((options && options.anchor) || 'bounceOutLeft', [
        transition('0 => 1', [
            ...(options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []),
            group([
                useAnimation(bounceOutLeft),
                ...(!options || !options.animateChildren || options.animateChildren === 'together'
                    ? [query('@*', animateChild(), { optional: true })]
                    : [])
            ]),
            ...(options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])
        ], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '2000px'
            }
        })
    ]);
}
export function bounceOutLeftOnLeaveAnimation(options) {
    return trigger((options && options.anchor) || 'bounceOutLeftOnLeave', [
        transition(':leave', [
            ...(options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []),
            group([
                useAnimation(bounceOutLeft),
                ...(!options || !options.animateChildren || options.animateChildren === 'together'
                    ? [query('@*', animateChild(), { optional: true })]
                    : [])
            ]),
            ...(options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])
        ], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '2000px'
            }
        })
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmNlLW91dC1sZWZ0LmFuaW1hdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYW5pbWF0aW9ucy8iLCJzb3VyY2VzIjpbImJvdW5jaW50LWV4aXRzL2JvdW5jZS1vdXQtbGVmdC5hbmltYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxZQUFZLEVBQ1osU0FBUyxFQUVULEtBQUssRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLEtBQUssRUFDTCxVQUFVLEVBQ1YsT0FBTyxFQUNQLFlBQVksRUFDYixNQUFNLHFCQUFxQixDQUFDO0FBYTdCLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQztJQUM5QixPQUFPLENBQ0wsNEJBQTRCLEVBQzVCLFNBQVMsQ0FBQztRQUNSLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ25GLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ3hGLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO0tBQ2pHLENBQUMsQ0FDSDtDQUNGLENBQUMsQ0FBQztBQUVILE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0FBRTlCLE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxPQUF3QztJQUM3RSxPQUFPLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksZUFBZSxFQUFFO1FBQzdELFVBQVUsQ0FDUixRQUFRLEVBQ1I7WUFDRSxHQUFH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b3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhbmltYXRlLFxuICBhbmltYXRlQ2hpbGQsXG4gIGFuaW1hdGlvbixcbiAgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLFxuICBncm91cCxcbiAga2V5ZnJhbWVzLFxuICBxdWVyeSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG4gIHVzZUFuaW1hdGlvblxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgSUFuaW1hdGlvbk9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJvdW5jZU91dExlZnRBbmltYXRpb25PcHRpb25zIGV4dGVuZHMgSUFuaW1hdGlvbk9wdGlvbnMge1xuICAvKipcbiAgICogVHJhbnNsYXRlLCBwb3NzaWJsZSB1bml0czogcHgsICUsIGVtLCByZW0sIHZ3LCB2aFxuICAgKlxuICAgKiBEZWZhdWx0OiAyMDAwcHhcbiAgICovXG4gIHRyYW5zbGF0ZT86IHN0cmluZztcbn1cblxuY29uc3QgYm91bmNlT3V0TGVmdCA9IGFuaW1hdGlvbihbXG4gIGFuaW1hdGUoXG4gICAgJ3t7ZHVyYXRpb259fW1zIHt7ZGVsYXl9fW1zJyxcbiAgICBrZXlmcmFtZXMoW1xuICAgICAgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKScsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDAgfSksXG4gICAgICBzdHlsZSh7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDIwcHgsIDAsIDApJywgZWFzaW5nOiAnZWFzZScsIG9mZnNldDogMC4yIH0pLFxuICAgICAgc3R5bGUoeyBvcGFjaXR5OiAwLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgte3t0cmFuc2xhdGV9fSwgMCwgMCknLCBlYXNpbmc6ICdlYXNlJywgb2Zmc2V0OiAxIH0pXG4gICAgXSlcbiAgKVxuXSk7XG5cbmNvbnN0IERFRkFVTFRfRFVSQVRJT04gPSAxMDAwO1xuXG5leHBvcnQgZnVuY3Rpb24gYm91bmNlT3V0TGVmdEFuaW1hdGlvbihvcHRpb25zPzogSUJvdW5jZU91dExlZnRBbmltYXRpb25PcHRpb25zKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmNob3IpIHx8ICdib3VuY2VPdXRMZWZ0JywgW1xuICAgIHRyYW5zaXRpb24oXG4gICAgICAnMCA9PiAxJyxcbiAgICAgIFtcbiAgICAgICAgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICdiZWZvcmUnID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKSxcbiAgICAgICAgZ3JvdXAoW1xuICAgICAgICAgIHVzZUFuaW1hdGlvbihib3VuY2VPdXRMZWZ0KSxcbiAgICAgICAgICAuLi4oIW9wdGlvbnMgfHwgIW9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuIHx8IG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAndG9nZXRoZXInXG4gICAgICAgICAgICA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV1cbiAgICAgICAgICAgIDogW10pXG4gICAgICAgIF0pLFxuICAgICAgICAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ2FmdGVyJyA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV0gOiBbXSlcbiAgICAgIF0sXG4gICAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGRlbGF5OiAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGF5KSB8fCAwLFxuICAgICAgICAgIGR1cmF0aW9uOiAob3B0aW9ucyAmJiBvcHRpb25zLmR1cmF0aW9uKSB8fCBERUZBVUxUX0RVUkFUSU9OLFxuICAgICAgICAgIHRyYW5zbGF0ZTogKG9wdGlvbnMgJiYgb3B0aW9ucy50cmFuc2xhdGUpIHx8ICcyMDAwcHgnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYm91bmNlT3V0TGVmdE9uTGVhdmVBbmltYXRpb24ob3B0aW9ucz86IElCb3VuY2VPdXRMZWZ0QW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIHJldHVybiB0cmlnZ2VyKChvcHRpb25zICYmIG9wdGlvbnMuYW5jaG9yKSB8fCAnYm91bmNlT3V0TGVmdE9uTGVhdmUnLCBbXG4gICAgdHJhbnNpdGlvbihcbiAgICAgICc6bGVhdmUnLFxuICAgICAgW1xuICAgICAgICAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ2JlZm9yZScgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldIDogW10pLFxuICAgICAgICBncm91cChbXG4gICAgICAgICAgdXNlQW5pbWF0aW9uKGJvdW5jZU91dExlZnQpLFxuICAgICAgICAgIC4uLighb3B0aW9ucyB8fCAhb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gfHwgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICd0b2dldGhlcidcbiAgICAgICAgICAgID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXVxuICAgICAgICAgICAgOiBbXSlcbiAgICAgICAgXSksXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYWZ0ZXInID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKVxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT04sXG4gICAgICAgICAgdHJhbnNsYXRlOiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYW5zbGF0ZSkgfHwgJzIwMDBweCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgXSk7XG59XG4iXX0=