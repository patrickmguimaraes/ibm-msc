import { animate, animateChild, animation, group, keyframes, query, style, transition, trigger, useAnimation } from '@angular/animations';
const lightSpeedIn = animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({
            visibility: 'visible',
            opacity: 0,
            transform: 'translate3d({{translate}}, 0, 0) skewX(-30deg)',
            easing: 'ease-out',
            offset: 0
        }),
        style({ opacity: 1, transform: 'skewX(20deg)', easing: 'ease-out', offset: 0.6 }),
        style({ opacity: 1, transform: 'skewX(-5deg)', easing: 'ease-out', offset: 0.8 }),
        style({ opacity: 1, transform: 'translate3d(0, 0, 0)', easing: 'ease-out', offset: 1 })
    ]))
]);
const DEFAULT_DURATION = 1000;
export function lightSpeedInAnimation(options) {
    return trigger((options && options.anchor) || 'lightSpeedIn', [
        transition('0 => 1', [
            ...(options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []),
            group([
                useAnimation(lightSpeedIn),
                ...(!options || !options.animateChildren || options.animateChildren === 'together'
                    ? [query('@*', animateChild(), { optional: true })]
                    : [])
            ]),
            ...(options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])
        ], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '100%'
            }
        })
    ]);
}
export function lightSpeedInOnEnterAnimation(options) {
    return trigger((options && options.anchor) || 'lightSpeedInOnEnter', [
        transition(':enter', [
            style({ visibility: 'hidden' }),
            ...(options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []),
            group([
                useAnimation(lightSpeedIn),
                ...(!options || !options.animateChildren || options.animateChildren === 'together'
                    ? [query('@*', animateChild(), { optional: true })]
                    : [])
            ]),
            ...(options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])
        ], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '100%'
            }
        })
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHQtc3BlZWQtaW4uYW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hbmltYXRpb25zLyIsInNvdXJjZXMiOlsibGlnaHQtc3BlZWQvbGlnaHQtc3BlZWQtaW4uYW5pbWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxPQUFPLEVBQ1AsWUFBWSxFQUNaLFNBQVMsRUFFVCxLQUFLLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE9BQU8sRUFDUCxZQUFZLEVBQ2IsTUFBTSxxQkFBcUIsQ0FBQztBQWE3QixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUM7SUFDN0IsT0FBTyxDQUNMLDRCQUE0QixFQUM1QixTQUFTLENBQUM7UUFDUixLQUFLLENBQUM7WUFDSixVQUFVLEVBQUUsU0FBUztZQUNyQixPQUFPLEVBQUUsQ0FBQztZQUNWLFNBQVMsRUFBRSxnREFBZ0Q7WUFDM0QsTUFBTSxFQUFFLFVBQVU7WUFDbEIsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDO1FBQ0YsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2pGLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNqRixLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUN4RixDQUFDLENBQ0g7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUU5QixNQUFNLFVBQVUscUJB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Q3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2dCQUMzRCxTQUFTLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU07YUFDcEQ7U0FDRixDQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIGFuaW1hdGVDaGlsZCxcbiAgYW5pbWF0aW9uLFxuICBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEsXG4gIGdyb3VwLFxuICBrZXlmcmFtZXMsXG4gIHF1ZXJ5LFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlcixcbiAgdXNlQW5pbWF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5pbXBvcnQgeyBJQW5pbWF0aW9uT3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBJTGlnaHRTcGVlZEluQW5pbWF0aW9uT3B0aW9ucyBleHRlbmRzIElBbmltYXRpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIFRyYW5zbGF0ZSwgcG9zc2libGUgdW5pdHM6IHB4LCAlLCBlbSwgcmVtLCB2dywgdmhcbiAgICpcbiAgICogRGVmYXVsdDogMTAwJVxuICAgKi9cbiAgdHJhbnNsYXRlPzogc3RyaW5nO1xufVxuXG5jb25zdCBsaWdodFNwZWVkSW4gPSBhbmltYXRpb24oW1xuICBhbmltYXRlKFxuICAgICd7e2R1cmF0aW9ufX1tcyB7e2RlbGF5fX1tcycsXG4gICAga2V5ZnJhbWVzKFtcbiAgICAgIHN0eWxlKHtcbiAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCh7e3RyYW5zbGF0ZX19LCAwLCAwKSBza2V3WCgtMzBkZWcpJyxcbiAgICAgICAgZWFzaW5nOiAnZWFzZS1vdXQnLFxuICAgICAgICBvZmZzZXQ6IDBcbiAgICAgIH0pLFxuICAgICAgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICdza2V3WCgyMGRlZyknLCBlYXNpbmc6ICdlYXNlLW91dCcsIG9mZnNldDogMC42IH0pLFxuICAgICAgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICdza2V3WCgtNWRlZyknLCBlYXNpbmc6ICdlYXNlLW91dCcsIG9mZnNldDogMC44IH0pLFxuICAgICAgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKScsIGVhc2luZzogJ2Vhc2Utb3V0Jywgb2Zmc2V0OiAxIH0pXG4gICAgXSlcbiAgKVxuXSk7XG5cbmNvbnN0IERFRkFVTFRfRFVSQVRJT04gPSAxMDAwO1xuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRTcGVlZEluQW5pbWF0aW9uKG9wdGlvbnM/OiBJTGlnaHRTcGVlZEluQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIHJldHVybiB0cmlnZ2VyKChvcHRpb25zICYmIG9wdGlvbnMuYW5jaG9yKSB8fCAnbGlnaHRTcGVlZEluJywgW1xuICAgIHRyYW5zaXRpb24oXG4gICAgICAnMCA9PiAxJyxcbiAgICAgIFtcbiAgICAgICAgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICdiZWZvcmUnID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKSxcbiAgICAgICAgZ3JvdXAoW1xuICAgICAgICAgIHVzZUFuaW1hdGlvbihsaWdodFNwZWVkSW4pLFxuICAgICAgICAgIC4uLighb3B0aW9ucyB8fCAhb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gfHwgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICd0b2dldGhlcidcbiAgICAgICAgICAgID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXVxuICAgICAgICAgICAgOiBbXSlcbiAgICAgICAgXSksXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYWZ0ZXInID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKVxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT04sXG4gICAgICAgICAgdHJhbnNsYXRlOiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYW5zbGF0ZSkgfHwgJzEwMCUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRTcGVlZEluT25FbnRlckFuaW1hdGlvbihvcHRpb25zPzogSUxpZ2h0U3BlZWRJbkFuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcigob3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvcikgfHwgJ2xpZ2h0U3BlZWRJbk9uRW50ZXInLCBbXG4gICAgdHJhbnNpdGlvbihcbiAgICAgICc6ZW50ZXInLFxuICAgICAgW1xuICAgICAgICBzdHlsZSh7IHZpc2liaWxpdHk6ICdoaWRkZW4nIH0pLFxuICAgICAgICAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ2JlZm9yZScgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldIDogW10pLFxuICAgICAgICBncm91cChbXG4gICAgICAgICAgdXNlQW5pbWF0aW9uKGxpZ2h0U3BlZWRJbiksXG4gICAgICAgICAgLi4uKCFvcHRpb25zIHx8ICFvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiB8fCBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ3RvZ2V0aGVyJ1xuICAgICAgICAgICAgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldXG4gICAgICAgICAgICA6IFtdKVxuICAgICAgICBdKSxcbiAgICAgICAgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICdhZnRlcicgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldIDogW10pXG4gICAgICBdLFxuICAgICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBkZWxheTogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxheSkgfHwgMCxcbiAgICAgICAgICBkdXJhdGlvbjogKG9wdGlvbnMgJiYgb3B0aW9ucy5kdXJhdGlvbikgfHwgREVGQVVMVF9EVVJBVElPTixcbiAgICAgICAgICB0cmFuc2xhdGU6IChvcHRpb25zICYmIG9wdGlvbnMudHJhbnNsYXRlKSB8fCAnMTAwJSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgXSk7XG59XG4iXX0=