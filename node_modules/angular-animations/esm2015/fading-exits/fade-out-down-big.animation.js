import { animate, animateChild, animation, group, keyframes, query, style, transition, trigger, useAnimation } from '@angular/animations';
const fadeOutDownBig = animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ opacity: 1, transform: 'translate3d(0, 0, 0)', easing: 'ease', offset: 0 }),
        style({ opacity: 0, transform: 'translate3d(0, {{translate}}, 0)', easing: 'ease', offset: 1 })
    ]))
]);
const DEFAULT_DURATION = 1000;
export function fadeOutDownBigAnimation(options) {
    return trigger((options && options.anchor) || 'fadeOutDownBig', [
        transition('0 => 1', [
            ...(options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []),
            group([
                useAnimation(fadeOutDownBig),
                ...(!options || !options.animateChildren || options.animateChildren === 'together'
                    ? [query('@*', animateChild(), { optional: true })]
                    : [])
            ]),
            ...(options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])
        ], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '2000px'
            }
        })
    ]);
}
export function fadeOutDownBigOnLeaveAnimation(options) {
    return trigger((options && options.anchor) || 'fadeOutDownBigOnLeave', [
        transition(':leave', [
            ...(options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []),
            group([
                useAnimation(fadeOutDownBig),
                ...(!options || !options.animateChildren || options.animateChildren === 'together'
                    ? [query('@*', animateChild(), { optional: true })]
                    : [])
            ]),
            ...(options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])
        ], {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '2000px'
            }
        })
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFkZS1vdXQtZG93bi1iaWcuYW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1hbmltYXRpb25zLyIsInNvdXJjZXMiOlsiZmFkaW5nLWV4aXRzL2ZhZGUtb3V0LWRvd24tYmlnLmFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsT0FBTyxFQUNQLFlBQVksRUFDWixTQUFTLEVBRVQsS0FBSyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1AsWUFBWSxFQUNiLE1BQU0scUJBQXFCLENBQUM7QUFhN0IsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDO0lBQy9CLE9BQU8sQ0FDTCw0QkFBNEIsRUFDNUIsU0FBUyxDQUFDO1FBQ1IsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbkYsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDaEcsQ0FBQyxDQUNIO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7QUFFOUIsTUFBTSxVQUFVLHVCQUF1QixDQUFDLE9BQXlDO0lBQy9FLE9BQU8sT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxnQkFBZ0IsRUFBRTtRQUM5RCxVQUFVLENBQ1IsUUFBUSxFQUNSO1lBQ0UsR0FBRyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsZUFBZSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzdHLEtBQUssQ0FBQztnQkFDSixZQUFZLENBQUMsY0FBYyxDQUFDO2dCQUM1QixHQUFHLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssVUFBVTtvQkFDaEYsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO29CQUNuRCxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQ1IsQ0FBQztZQUNGLEdBQUcsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUM3RyxFQUNEO1lBQ0UsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDdEMsUUFBUSxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxnQkFBZ0I7Z0JBQzNELFNBQVMsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksUUFBUTthQUN0RDtTQUNGLENBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLDhCQUE4QixDQUFDLE9BQXlDO0lBQ3RGLE9BQU8sT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSx1QkFBdUIsRUFBRTtRQUNyRSxVQUFVLENBQ1IsUUFBUSxFQUNSO1lBQ0UsR0FBRyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsZUFBZSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzdHLEtBQUssQ0FBQztnQkFDSixZQUFZLENBQUMsY0FBYyxDQUFDO2dCQUM1QixHQUFHLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssVUFBVTtvQkFDaEYsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO29CQUNuRCxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQ1IsQ0FBQztZQUNGLEdBQUcsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUM3RyxFQUNEO1lBQ0UsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDdEMsUUFBUSxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxnQkFBZ0I7Z0JBQzNELFNBQVMsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksUUFBUTthQUN0RDtTQUNGLENBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYW5pbWF0ZSxcbiAgYW5pbWF0ZUNoaWxkLFxuICBhbmltYXRpb24sXG4gIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSxcbiAgZ3JvdXAsXG4gIGtleWZyYW1lcyxcbiAgcXVlcnksXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uLFxuICB0cmlnZ2VyLFxuICB1c2VBbmltYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbmltcG9ydCB7IElBbmltYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElGYWRlT3V0RG93bkJpZ0FuaW1hdGlvbk9wdGlvbnMgZXh0ZW5kcyBJQW5pbWF0aW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUcmFuc2xhdGUsIHBvc3NpYmxlIHVuaXRzOiBweCwgJSwgZW0sIHJlbSwgdncsIHZoXG4gICAqXG4gICAqIERlZmF1bHQ6IDIwMDBweFxuICAgKi9cbiAgdHJhbnNsYXRlPzogc3RyaW5nO1xufVxuXG5jb25zdCBmYWRlT3V0RG93bkJpZyA9IGFuaW1hdGlvbihbXG4gIGFuaW1hdGUoXG4gICAgJ3t7ZHVyYXRpb259fW1zIHt7ZGVsYXl9fW1zJyxcbiAgICBrZXlmcmFtZXMoW1xuICAgICAgc3R5bGUoeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKScsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDAgfSksXG4gICAgICBzdHlsZSh7IG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIHt7dHJhbnNsYXRlfX0sIDApJywgZWFzaW5nOiAnZWFzZScsIG9mZnNldDogMSB9KVxuICAgIF0pXG4gIClcbl0pO1xuXG5jb25zdCBERUZBVUxUX0RVUkFUSU9OID0gMTAwMDtcblxuZXhwb3J0IGZ1bmN0aW9uIGZhZGVPdXREb3duQmlnQW5pbWF0aW9uKG9wdGlvbnM/OiBJRmFkZU91dERvd25CaWdBbmltYXRpb25PcHRpb25zKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmNob3IpIHx8ICdmYWRlT3V0RG93bkJpZycsIFtcbiAgICB0cmFuc2l0aW9uKFxuICAgICAgJzAgPT4gMScsXG4gICAgICBbXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYmVmb3JlJyA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV0gOiBbXSksXG4gICAgICAgIGdyb3VwKFtcbiAgICAgICAgICB1c2VBbmltYXRpb24oZmFkZU91dERvd25CaWcpLFxuICAgICAgICAgIC4uLighb3B0aW9ucyB8fCAhb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gfHwgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICd0b2dldGhlcidcbiAgICAgICAgICAgID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXVxuICAgICAgICAgICAgOiBbXSlcbiAgICAgICAgXSksXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYWZ0ZXInID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKVxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT04sXG4gICAgICAgICAgdHJhbnNsYXRlOiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYW5zbGF0ZSkgfHwgJzIwMDBweCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmYWRlT3V0RG93bkJpZ09uTGVhdmVBbmltYXRpb24ob3B0aW9ucz86IElGYWRlT3V0RG93bkJpZ0FuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcigob3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvcikgfHwgJ2ZhZGVPdXREb3duQmlnT25MZWF2ZScsIFtcbiAgICB0cmFuc2l0aW9uKFxuICAgICAgJzpsZWF2ZScsXG4gICAgICBbXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYmVmb3JlJyA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV0gOiBbXSksXG4gICAgICAgIGdyb3VwKFtcbiAgICAgICAgICB1c2VBbmltYXRpb24oZmFkZU91dERvd25CaWcpLFxuICAgICAgICAgIC4uLighb3B0aW9ucyB8fCAhb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gfHwgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICd0b2dldGhlcidcbiAgICAgICAgICAgID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXVxuICAgICAgICAgICAgOiBbXSlcbiAgICAgICAgXSksXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYWZ0ZXInID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKVxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT04sXG4gICAgICAgICAgdHJhbnNsYXRlOiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYW5zbGF0ZSkgfHwgJzIwMDBweCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgXSk7XG59XG4iXX0=