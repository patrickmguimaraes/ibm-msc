import * as tslib_1 from "tslib";
import { animate, animateChild, animation, group, keyframes, query, style, transition, trigger, useAnimation } from '@angular/animations';
var rotateInDownLeft = animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ visibility: 'visible', opacity: 0, transform: 'rotate3d(0, 0, 1, {{degrees}}deg)', easing: 'ease', offset: 0 }),
        style({ opacity: 1, transform: 'rotate3d(0, 0, 1, 0deg)', easing: 'ease', offset: 1 })
    ]))
]);
var DEFAULT_DURATION = 1000;
export function rotateInDownLeftAnimation(options) {
    return trigger((options && options.anchor) || 'rotateInDownLeft', [
        transition('0 => 1', tslib_1.__spread((options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []), [
            style({ 'transform-origin': 'left bottom' }),
            group(tslib_1.__spread([
                useAnimation(rotateInDownLeft)
            ], (!options || !options.animateChildren || options.animateChildren === 'together'
                ? [query('@*', animateChild(), { optional: true })]
                : [])))
        ], (options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])), {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || -45
            }
        })
    ]);
}
export function rotateInDownLeftOnEnterAnimation(options) {
    return trigger((options && options.anchor) || 'rotateInDownLeftOnEnter', [
        transition(':enter', tslib_1.__spread([
            style({ visibility: 'hidden' })
        ], (options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []), [
            style({ 'transform-origin': 'left bottom' }),
            group(tslib_1.__spread([
                useAnimation(rotateInDownLeft)
            ], (!options || !options.animateChildren || options.animateChildren === 'together'
                ? [query('@*', animateChild(), { optional: true })]
                : [])))
        ], (options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])), {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || -45
            }
        })
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLWluLWRvd24tbGVmdC5hbmltYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWFuaW1hdGlvbnMvIiwic291cmNlcyI6WyJyb3RhdGluZy1lbnRyYW5jZXMvcm90YXRlLWluLWRvd24tbGVmdC5hbmltYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxPQUFPLEVBQ1AsWUFBWSxFQUNaLFNBQVMsRUFFVCxLQUFLLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE9BQU8sRUFDUCxZQUFZLEVBQ2IsTUFBTSxxQkFBcUIsQ0FBQztBQWE3QixJQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQztJQUNqQyxPQUFPLENBQ0wsNEJBQTRCLEVBQzVCLFNBQVMsQ0FBQztRQUNSLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDdkgsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDdkYsQ0FBQyxDQUNIO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7QUFFOUIsTUFBTSxVQUFVLHlCQUF5QixDQUFDLE9BQTJDO0lBQ25GLE9BQU8sT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxrQkFBa0IsRUFBRTtRQUNoRSxVQUFVLENBQ1IsUUFBUSxtQkFFSCxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsZUFBZSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzdHLEtBQUssQ0FBQyxFQUFFLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxDQUFDO1lBQzVDLEtBQUs7Z0JBQ0gsWUFBWSxDQUFDLGdCQUFnQixDQUFDO2VBQzNCLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssVUFBVTtnQkFDaEYsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUNuRCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1A7V0FDQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsZUFBZSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBRTlHO1lBQ0UsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDdEMsUUFBUSxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxnQkFBZ0I7Z0JBQzNELE9BQU8sRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2FBQzdDO1NBQ0YsQ0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0NBQWdDLENBQUMsT0FBMkM7SUFDMUYsT0FBTyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLHlCQUF5QixFQUFFO1FBQ3ZFLFVBQVUsQ0FDUixRQUFRO1lBRU4sS0FBSyxDQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDO1dBQzVCLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDN0csS0FBSyxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsYUFBYSxFQUFFLENBQUM7WUFDNUMsS0FBSztnQkFDSCxZQUFZLENBQUMsZ0JBQWdCLENBQUM7ZUFDM0IsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxVQUFVO2dCQUNoRixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ25ELENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDUDtXQUNDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FFOUc7WUFDRSxNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUN0QyxRQUFRLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLGdCQUFnQjtnQkFDM0QsT0FBTyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7YUFDN0M7U0FDRixDQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIGFuaW1hdGVDaGlsZCxcbiAgYW5pbWF0aW9uLFxuICBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEsXG4gIGdyb3VwLFxuICBrZXlmcmFtZXMsXG4gIHF1ZXJ5LFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvbixcbiAgdHJpZ2dlcixcbiAgdXNlQW5pbWF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5pbXBvcnQgeyBJQW5pbWF0aW9uT3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBJUm90YXRlSW5Eb3duTGVmdEFuaW1hdGlvbk9wdGlvbnMgZXh0ZW5kcyBJQW5pbWF0aW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBbmdsZSAtIG51bWJlciBvZiBkZWdyZWVzIGZyb20gd2hpY2ggdG8gc3RhcnQgYW5pbWF0aW9uLlxuICAgKlxuICAgKiBEZWZhdWx0IC00NVxuICAgKi9cbiAgZGVncmVlcz86IG51bWJlcjtcbn1cblxuY29uc3Qgcm90YXRlSW5Eb3duTGVmdCA9IGFuaW1hdGlvbihbXG4gIGFuaW1hdGUoXG4gICAgJ3t7ZHVyYXRpb259fW1zIHt7ZGVsYXl9fW1zJyxcbiAgICBrZXlmcmFtZXMoW1xuICAgICAgc3R5bGUoeyB2aXNpYmlsaXR5OiAndmlzaWJsZScsIG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3JvdGF0ZTNkKDAsIDAsIDEsIHt7ZGVncmVlc319ZGVnKScsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDAgfSksXG4gICAgICBzdHlsZSh7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3JvdGF0ZTNkKDAsIDAsIDEsIDBkZWcpJywgZWFzaW5nOiAnZWFzZScsIG9mZnNldDogMSB9KVxuICAgIF0pXG4gIClcbl0pO1xuXG5jb25zdCBERUZBVUxUX0RVUkFUSU9OID0gMTAwMDtcblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUluRG93bkxlZnRBbmltYXRpb24ob3B0aW9ucz86IElSb3RhdGVJbkRvd25MZWZ0QW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIHJldHVybiB0cmlnZ2VyKChvcHRpb25zICYmIG9wdGlvbnMuYW5jaG9yKSB8fCAncm90YXRlSW5Eb3duTGVmdCcsIFtcbiAgICB0cmFuc2l0aW9uKFxuICAgICAgJzAgPT4gMScsXG4gICAgICBbXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYmVmb3JlJyA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV0gOiBbXSksXG4gICAgICAgIHN0eWxlKHsgJ3RyYW5zZm9ybS1vcmlnaW4nOiAnbGVmdCBib3R0b20nIH0pLFxuICAgICAgICBncm91cChbXG4gICAgICAgICAgdXNlQW5pbWF0aW9uKHJvdGF0ZUluRG93bkxlZnQpLFxuICAgICAgICAgIC4uLighb3B0aW9ucyB8fCAhb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gfHwgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICd0b2dldGhlcidcbiAgICAgICAgICAgID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXVxuICAgICAgICAgICAgOiBbXSlcbiAgICAgICAgXSksXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYWZ0ZXInID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKVxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT04sXG4gICAgICAgICAgZGVncmVlczogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWdyZWVzKSB8fCAtNDVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVJbkRvd25MZWZ0T25FbnRlckFuaW1hdGlvbihvcHRpb25zPzogSVJvdGF0ZUluRG93bkxlZnRBbmltYXRpb25PcHRpb25zKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmNob3IpIHx8ICdyb3RhdGVJbkRvd25MZWZ0T25FbnRlcicsIFtcbiAgICB0cmFuc2l0aW9uKFxuICAgICAgJzplbnRlcicsXG4gICAgICBbXG4gICAgICAgIHN0eWxlKHsgdmlzaWJpbGl0eTogJ2hpZGRlbicgfSksXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYmVmb3JlJyA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV0gOiBbXSksXG4gICAgICAgIHN0eWxlKHsgJ3RyYW5zZm9ybS1vcmlnaW4nOiAnbGVmdCBib3R0b20nIH0pLFxuICAgICAgICBncm91cChbXG4gICAgICAgICAgdXNlQW5pbWF0aW9uKHJvdGF0ZUluRG93bkxlZnQpLFxuICAgICAgICAgIC4uLighb3B0aW9ucyB8fCAhb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gfHwgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICd0b2dldGhlcidcbiAgICAgICAgICAgID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXVxuICAgICAgICAgICAgOiBbXSlcbiAgICAgICAgXSksXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYWZ0ZXInID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKVxuICAgICAgXSxcbiAgICAgIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgZGVsYXk6IChvcHRpb25zICYmIG9wdGlvbnMuZGVsYXkpIHx8IDAsXG4gICAgICAgICAgZHVyYXRpb246IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IERFRkFVTFRfRFVSQVRJT04sXG4gICAgICAgICAgZGVncmVlczogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWdyZWVzKSB8fCAtNDVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgXSk7XG59XG4iXX0=