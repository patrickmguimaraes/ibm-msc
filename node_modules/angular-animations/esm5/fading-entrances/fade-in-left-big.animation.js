import * as tslib_1 from "tslib";
import { animate, animateChild, animation, group, keyframes, query, style, transition, trigger, useAnimation } from '@angular/animations';
var fadeInLeftBig = animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ visibility: 'visible', opacity: 0, transform: 'translate3d(-{{translate}}, 0, 0)', easing: 'ease', offset: 0 }),
        style({ opacity: 1, transform: 'translate3d(0, 0, 0)', easing: 'ease', offset: 1 })
    ]))
]);
var DEFAULT_DURATION = 1000;
export function fadeInLeftBigAnimation(options) {
    return trigger((options && options.anchor) || 'fadeInLeftBig', [
        transition('0 => 1', tslib_1.__spread((options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []), [
            group(tslib_1.__spread([
                useAnimation(fadeInLeftBig)
            ], (!options || !options.animateChildren || options.animateChildren === 'together'
                ? [query('@*', animateChild(), { optional: true })]
                : [])))
        ], (options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])), {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '2000px'
            }
        })
    ]);
}
export function fadeInLeftBigOnEnterAnimation(options) {
    return trigger((options && options.anchor) || 'fadeInLeftBigOnEnter', [
        transition(':enter', tslib_1.__spread([
            style({ visibility: 'hidden' })
        ], (options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []), [
            group(tslib_1.__spread([
                useAnimation(fadeInLeftBig)
            ], (!options || !options.animateChildren || options.animateChildren === 'together'
                ? [query('@*', animateChild(), { optional: true })]
                : [])))
        ], (options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])), {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                translate: (options && options.translate) || '2000px'
            }
        })
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFkZS1pbi1sZWZ0LWJpZy5hbmltYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWFuaW1hdGlvbnMvIiwic291cmNlcyI6WyJmYWRpbmctZW50cmFuY2VzL2ZhZGUtaW4tbGVmdC1iaWcuYW5pbWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsT0FBTyxFQUNQLFlBQVksRUFDWixTQUFTLEVBRVQsS0FBSyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsS0FBSyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1AsWUFBWSxFQUNiLE1BQU0scUJBQXFCLENBQUM7QUFhN0IsSUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDO0lBQzlCLE9BQU8sQ0FDTCw0QkFBNEIsRUFDNUIsU0FBUyxDQUFDO1FBQ1IsS0FBSyxDQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN2SCxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUNwRixDQUFDLENBQ0g7Q0FDRixDQUFDLENBQUM7QUFFSCxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUU5QixNQUFNLFVBQVUsc0JBQXNCLENBQUMsT0FBd0M7SUFDN0UsT0FBTyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLGVBQWUsRUFBRTtRQUM3RCxVQUFVLENBQ1IsUUFBUSxtQkFFSCxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsZUFBZSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzdHLEtBQUs7Z0JBQ0gsWUFBWSxDQUFDLGFBQWEsQ0FBQztlQUN4QixDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsZUFBZSxLQUFLLFVBQVU7Z0JBQ2hGLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDbkQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNQO1dBQ0MsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUU5RztZQUNFLE1BQU0sRUFBRTtnQkFDTixLQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCO2dCQUMzRCxTQUFTLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLFFBQVE7YUFDdEQ7U0FDRixDQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSw2QkFBNkIsQ0FBQyxPQUF3QztJQUNwRixPQUFPLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksc0JBQXNCLEVBQUU7UUFDcEUsVUFBVSxDQUNSLFFBQVE7WUFFTixLQUFLLENBQUMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUM7V0FDNUIsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM3RyxLQUFLO2dCQUNILFlBQVksQ0FBQyxhQUFhLENBQUM7ZUFDeEIsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxVQUFVO2dCQUNoRixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ25ELENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDUDtXQUNDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FFOUc7WUFDRSxNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUN0QyxRQUFRLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLGdCQUFnQjtnQkFDM0QsU0FBUyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxRQUFRO2FBQ3REO1NBQ0YsQ0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhbmltYXRlLFxuICBhbmltYXRlQ2hpbGQsXG4gIGFuaW1hdGlvbixcbiAgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLFxuICBncm91cCxcbiAga2V5ZnJhbWVzLFxuICBxdWVyeSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG4gIHVzZUFuaW1hdGlvblxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgSUFuaW1hdGlvbk9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZhZGVJbkxlZnRCaWdBbmltYXRpb25PcHRpb25zIGV4dGVuZHMgSUFuaW1hdGlvbk9wdGlvbnMge1xuICAvKipcbiAgICogVHJhbnNsYXRlLCBwb3NzaWJsZSB1bml0czogcHgsICUsIGVtLCByZW0sIHZ3LCB2aFxuICAgKlxuICAgKiBEZWZhdWx0OiAyMDAwcHhcbiAgICovXG4gIHRyYW5zbGF0ZT86IHN0cmluZztcbn1cblxuY29uc3QgZmFkZUluTGVmdEJpZyA9IGFuaW1hdGlvbihbXG4gIGFuaW1hdGUoXG4gICAgJ3t7ZHVyYXRpb259fW1zIHt7ZGVsYXl9fW1zJyxcbiAgICBrZXlmcmFtZXMoW1xuICAgICAgc3R5bGUoeyB2aXNpYmlsaXR5OiAndmlzaWJsZScsIG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKC17e3RyYW5zbGF0ZX19LCAwLCAwKScsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDAgfSksXG4gICAgICBzdHlsZSh7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJywgZWFzaW5nOiAnZWFzZScsIG9mZnNldDogMSB9KVxuICAgIF0pXG4gIClcbl0pO1xuXG5jb25zdCBERUZBVUxUX0RVUkFUSU9OID0gMTAwMDtcblxuZXhwb3J0IGZ1bmN0aW9uIGZhZGVJbkxlZnRCaWdBbmltYXRpb24ob3B0aW9ucz86IElGYWRlSW5MZWZ0QmlnQW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIHJldHVybiB0cmlnZ2VyKChvcHRpb25zICYmIG9wdGlvbnMuYW5jaG9yKSB8fCAnZmFkZUluTGVmdEJpZycsIFtcbiAgICB0cmFuc2l0aW9uKFxuICAgICAgJzAgPT4gMScsXG4gICAgICBbXG4gICAgICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAnYmVmb3JlJyA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV0gOiBbXSksXG4gICAgICAgIGdyb3VwKFtcbiAgICAgICAgICB1c2VBbmltYXRpb24oZmFkZUluTGVmdEJpZyksXG4gICAgICAgICAgLi4uKCFvcHRpb25zIHx8ICFvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiB8fCBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ3RvZ2V0aGVyJ1xuICAgICAgICAgICAgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldXG4gICAgICAgICAgICA6IFtdKVxuICAgICAgICBdKSxcbiAgICAgICAgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICdhZnRlcicgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldIDogW10pXG4gICAgICBdLFxuICAgICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBkZWxheTogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxheSkgfHwgMCxcbiAgICAgICAgICBkdXJhdGlvbjogKG9wdGlvbnMgJiYgb3B0aW9ucy5kdXJhdGlvbikgfHwgREVGQVVMVF9EVVJBVElPTixcbiAgICAgICAgICB0cmFuc2xhdGU6IChvcHRpb25zICYmIG9wdGlvbnMudHJhbnNsYXRlKSB8fCAnMjAwMHB4J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZhZGVJbkxlZnRCaWdPbkVudGVyQW5pbWF0aW9uKG9wdGlvbnM/OiBJRmFkZUluTGVmdEJpZ0FuaW1hdGlvbk9wdGlvbnMpOiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcigob3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvcikgfHwgJ2ZhZGVJbkxlZnRCaWdPbkVudGVyJywgW1xuICAgIHRyYW5zaXRpb24oXG4gICAgICAnOmVudGVyJyxcbiAgICAgIFtcbiAgICAgICAgc3R5bGUoeyB2aXNpYmlsaXR5OiAnaGlkZGVuJyB9KSxcbiAgICAgICAgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICdiZWZvcmUnID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKSxcbiAgICAgICAgZ3JvdXAoW1xuICAgICAgICAgIHVzZUFuaW1hdGlvbihmYWRlSW5MZWZ0QmlnKSxcbiAgICAgICAgICAuLi4oIW9wdGlvbnMgfHwgIW9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuIHx8IG9wdGlvbnMuYW5pbWF0ZUNoaWxkcmVuID09PSAndG9nZXRoZXInXG4gICAgICAgICAgICA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV1cbiAgICAgICAgICAgIDogW10pXG4gICAgICAgIF0pLFxuICAgICAgICAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ2FmdGVyJyA/IFtxdWVyeSgnQConLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV0gOiBbXSlcbiAgICAgIF0sXG4gICAgICB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGRlbGF5OiAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGF5KSB8fCAwLFxuICAgICAgICAgIGR1cmF0aW9uOiAob3B0aW9ucyAmJiBvcHRpb25zLmR1cmF0aW9uKSB8fCBERUZBVUxUX0RVUkFUSU9OLFxuICAgICAgICAgIHRyYW5zbGF0ZTogKG9wdGlvbnMgJiYgb3B0aW9ucy50cmFuc2xhdGUpIHx8ICcyMDAwcHgnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG4gIF0pO1xufVxuIl19