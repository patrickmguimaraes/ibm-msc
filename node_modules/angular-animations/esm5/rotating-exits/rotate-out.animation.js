import * as tslib_1 from "tslib";
import { animate, animateChild, animation, group, keyframes, query, style, transition, trigger, useAnimation } from '@angular/animations';
var rotateOut = animation([
    animate('{{duration}}ms {{delay}}ms', keyframes([
        style({ opacity: 1, easing: 'ease', offset: 0 }),
        style({ opacity: 0, transform: 'rotate({{degrees}}deg)', easing: 'ease', offset: 1 })
    ]))
]);
var DEFAULT_DURATION = 1000;
export function rotateOutAnimation(options) {
    return trigger((options && options.anchor) || 'rotateOut', [
        transition('0 => 1', tslib_1.__spread((options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []), [
            style({ 'transform-origin': 'center' }),
            group(tslib_1.__spread([
                useAnimation(rotateOut)
            ], (!options || !options.animateChildren || options.animateChildren === 'together'
                ? [query('@*', animateChild(), { optional: true })]
                : [])))
        ], (options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])), {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || 200
            }
        })
    ]);
}
export function rotateOutOnLeaveAnimation(options) {
    return trigger((options && options.anchor) || 'rotateOutOnLeave', [
        transition(':leave', tslib_1.__spread((options && options.animateChildren === 'before' ? [query('@*', animateChild(), { optional: true })] : []), [
            style({ 'transform-origin': 'center' }),
            group(tslib_1.__spread([
                useAnimation(rotateOut)
            ], (!options || !options.animateChildren || options.animateChildren === 'together'
                ? [query('@*', animateChild(), { optional: true })]
                : [])))
        ], (options && options.animateChildren === 'after' ? [query('@*', animateChild(), { optional: true })] : [])), {
            params: {
                delay: (options && options.delay) || 0,
                duration: (options && options.duration) || DEFAULT_DURATION,
                degrees: (options && options.degrees) || 200
            }
        })
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLW91dC5hbmltYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWFuaW1hdGlvbnMvIiwic291cmNlcyI6WyJyb3RhdGluZy1leGl0cy9yb3RhdGUtb3V0LmFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxZQUFZLEVBQ1osU0FBUyxFQUVULEtBQUssRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLEtBQUssRUFDTCxVQUFVLEVBQ1YsT0FBTyxFQUNQLFlBQVksRUFDYixNQUFNLHFCQUFxQixDQUFDO0FBYTdCLElBQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUMxQixPQUFPLENBQ0wsNEJBQTRCLEVBQzVCLFNBQVMsQ0FBQztRQUNSLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDaEQsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDdEYsQ0FBQyxDQUNIO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7QUFFOUIsTUFBTSxVQUFVLGtCQUFrQixDQUFDLE9BQW9DO0lBQ3JFLE9BQU8sT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLEVBQUU7UUFDekQsVUFBVSxDQUNSLFFBQVEsbUJBRUgsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM3RyxLQUFLLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsQ0FBQztZQUN2QyxLQUFLO2dCQUNILFlBQVksQ0FBQyxTQUFTLENBQUM7ZUFDcEIsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxVQUFVO2dCQUNoRixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ25ELENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDUDtXQUNDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FFOUc7WUFDRSxNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUN0QyxRQUFRLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLGdCQUFnQjtnQkFDM0QsT0FBTyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHO2FBQzdDO1NBQ0YsQ0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQUMsT0FBb0M7SUFDNUUsT0FBTyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLGtCQUFrQixFQUFFO1FBQ2hFLFVBQVUsQ0FDUixRQUFRLG1CQUVILENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDN0csS0FBSyxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLENBQUM7WUFDdkMsS0FBSztnQkFDSCxZQUFZLENBQUMsU0FBUyxDQUFDO2VBQ3BCLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssVUFBVTtnQkFDaEYsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUNuRCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1A7V0FDQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsZUFBZSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBRTlHO1lBQ0UsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDdEMsUUFBUSxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxnQkFBZ0I7Z0JBQzNELE9BQU8sRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRzthQUM3QztTQUNGLENBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYW5pbWF0ZSxcbiAgYW5pbWF0ZUNoaWxkLFxuICBhbmltYXRpb24sXG4gIEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSxcbiAgZ3JvdXAsXG4gIGtleWZyYW1lcyxcbiAgcXVlcnksXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uLFxuICB0cmlnZ2VyLFxuICB1c2VBbmltYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbmltcG9ydCB7IElBbmltYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElSb3RhdGVPdXRBbmltYXRpb25PcHRpb25zIGV4dGVuZHMgSUFuaW1hdGlvbk9wdGlvbnMge1xuICAvKipcbiAgICogQW5nbGUgLSBudW1iZXIgb2YgZGVncmVlcyBhdCB3aGljaCBlbmQgYW5pbWF0aW9uLlxuICAgKlxuICAgKiBEZWZhdWx0IDIwMFxuICAgKi9cbiAgZGVncmVlcz86IG51bWJlcjtcbn1cblxuY29uc3Qgcm90YXRlT3V0ID0gYW5pbWF0aW9uKFtcbiAgYW5pbWF0ZShcbiAgICAne3tkdXJhdGlvbn19bXMge3tkZWxheX19bXMnLFxuICAgIGtleWZyYW1lcyhbXG4gICAgICBzdHlsZSh7IG9wYWNpdHk6IDEsIGVhc2luZzogJ2Vhc2UnLCBvZmZzZXQ6IDAgfSksXG4gICAgICBzdHlsZSh7IG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3JvdGF0ZSh7e2RlZ3JlZXN9fWRlZyknLCBlYXNpbmc6ICdlYXNlJywgb2Zmc2V0OiAxIH0pXG4gICAgXSlcbiAgKVxuXSk7XG5cbmNvbnN0IERFRkFVTFRfRFVSQVRJT04gPSAxMDAwO1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlT3V0QW5pbWF0aW9uKG9wdGlvbnM/OiBJUm90YXRlT3V0QW5pbWF0aW9uT3B0aW9ucyk6IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YSB7XG4gIHJldHVybiB0cmlnZ2VyKChvcHRpb25zICYmIG9wdGlvbnMuYW5jaG9yKSB8fCAncm90YXRlT3V0JywgW1xuICAgIHRyYW5zaXRpb24oXG4gICAgICAnMCA9PiAxJyxcbiAgICAgIFtcbiAgICAgICAgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICdiZWZvcmUnID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKSxcbiAgICAgICAgc3R5bGUoeyAndHJhbnNmb3JtLW9yaWdpbic6ICdjZW50ZXInIH0pLFxuICAgICAgICBncm91cChbXG4gICAgICAgICAgdXNlQW5pbWF0aW9uKHJvdGF0ZU91dCksXG4gICAgICAgICAgLi4uKCFvcHRpb25zIHx8ICFvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiB8fCBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ3RvZ2V0aGVyJ1xuICAgICAgICAgICAgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldXG4gICAgICAgICAgICA6IFtdKVxuICAgICAgICBdKSxcbiAgICAgICAgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICdhZnRlcicgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldIDogW10pXG4gICAgICBdLFxuICAgICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBkZWxheTogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxheSkgfHwgMCxcbiAgICAgICAgICBkdXJhdGlvbjogKG9wdGlvbnMgJiYgb3B0aW9ucy5kdXJhdGlvbikgfHwgREVGQVVMVF9EVVJBVElPTixcbiAgICAgICAgICBkZWdyZWVzOiAob3B0aW9ucyAmJiBvcHRpb25zLmRlZ3JlZXMpIHx8IDIwMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZU91dE9uTGVhdmVBbmltYXRpb24ob3B0aW9ucz86IElSb3RhdGVPdXRBbmltYXRpb25PcHRpb25zKTogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmNob3IpIHx8ICdyb3RhdGVPdXRPbkxlYXZlJywgW1xuICAgIHRyYW5zaXRpb24oXG4gICAgICAnOmxlYXZlJyxcbiAgICAgIFtcbiAgICAgICAgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICdiZWZvcmUnID8gW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSA6IFtdKSxcbiAgICAgICAgc3R5bGUoeyAndHJhbnNmb3JtLW9yaWdpbic6ICdjZW50ZXInIH0pLFxuICAgICAgICBncm91cChbXG4gICAgICAgICAgdXNlQW5pbWF0aW9uKHJvdGF0ZU91dCksXG4gICAgICAgICAgLi4uKCFvcHRpb25zIHx8ICFvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiB8fCBvcHRpb25zLmFuaW1hdGVDaGlsZHJlbiA9PT0gJ3RvZ2V0aGVyJ1xuICAgICAgICAgICAgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldXG4gICAgICAgICAgICA6IFtdKVxuICAgICAgICBdKSxcbiAgICAgICAgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlQ2hpbGRyZW4gPT09ICdhZnRlcicgPyBbcXVlcnkoJ0AqJywgYW5pbWF0ZUNoaWxkKCksIHsgb3B0aW9uYWw6IHRydWUgfSldIDogW10pXG4gICAgICBdLFxuICAgICAge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBkZWxheTogKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxheSkgfHwgMCxcbiAgICAgICAgICBkdXJhdGlvbjogKG9wdGlvbnMgJiYgb3B0aW9ucy5kdXJhdGlvbikgfHwgREVGQVVMVF9EVVJBVElPTixcbiAgICAgICAgICBkZWdyZWVzOiAob3B0aW9ucyAmJiBvcHRpb25zLmRlZ3JlZXMpIHx8IDIwMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICBdKTtcbn1cbiJdfQ==